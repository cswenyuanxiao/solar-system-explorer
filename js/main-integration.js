// ‰∏ªÈ°µÈù¢ÈõÜÊàêÂäüËÉΩ - ÊêúÁ¥¢„ÄÅÊî∂Ëóè„ÄÅ‰∏ªÈ¢òÂàáÊç¢ class MainPageIntegration { constructor() { this.planets = [ { name: 'Sun', description: 'Our star - the heart of the solar system', image: 'images/sun.jpg', url: 'sun.html', keywords: ['star', 'solar', 'fusion', 'energy', 'light', 'heat'] }, { name: 'Mercury', description: 'The smallest planet, closest to the Sun', image: 'images/mercury.jpg', url: 'mercury.html', keywords: ['smallest', 'closest', 'hot', 'cold', 'extreme', 'temperature'] }, { name: 'Venus', description: 'The hottest planet, Earth\'s twin', image: 'images/venus.jpg', url: 'venus.html', keywords: ['hottest', 'twin', 'greenhouse', 'thick', 'atmosphere', 'backwards'] }, { name: 'Earth', description: 'Our home planet, the blue marble', image: 'images/earth.jpg', url: 'earth.html', keywords: ['home', 'blue', 'life', 'water', 'atmosphere', 'habitable'] }, { name: 'Mars', description: 'The red planet, future human destination', image: 'images/mars.jpg', url: 'mars.html', keywords: ['red', 'rust', 'future', 'human', 'colonization', 'rovers'] }, { name: 'Jupiter', description: 'The largest planet, gas giant', image: 'images/jupiter.jpg', url: 'jupiter.html', keywords: ['largest', 'gas', 'giant', 'great', 'red', 'spot', 'moons'] }, { name: 'Saturn', description: 'The ringed planet, most beautiful', image: 'images/saturn.jpg', url: 'saturn.html', keywords: ['rings', 'beautiful', 'gas', 'giant', 'float', 'water'] }, { name: 'Uranus', description: 'The ice giant, tilted on its side', image: 'images/uranus.jpg', url: 'uranus.html', keywords: ['ice', 'giant', 'tilted', 'sideways', 'cold', 'methane'] }, { name: 'Neptune', description: 'The windiest planet, deep blue', image: 'images/neptune.jpg', url: 'neptune.html', keywords: ['windy', 'blue', 'ice', 'giant', 'storms', 'farthest'] } ]; this.favoritesManager = null; this.currentTheme = localStorage.getItem('theme') || 'dark'; this.initialize(); } initialize() { this.initializeSearch(); this.initializeFavorites(); this.initializeTheme(); this.addFavoriteIndicators(); this.updateFavoritesCount(); } // ÊêúÁ¥¢ÂäüËÉΩ initializeSearch() { const searchInput = document.getElementById('mainSearchInput'); const searchButton = document.getElementById('mainSearchButton'); const searchResults = document.getElementById('mainSearchResults'); if (!searchInput || !searchResults) return; // ÊêúÁ¥¢ËæìÂÖ•‰∫ã‰ª∂ searchInput.addEventListener('input', (e) => { this.performSearch(e.target.value); }); // ÊêúÁ¥¢ÊåâÈíÆÁÇπÂáª searchButton.addEventListener('click', () => { this.performSearch(searchInput.value); }); // ÂõûËΩ¶ÈîÆÊêúÁ¥¢ searchInput.addEventListener('keypress', (e) => { if (e.key === 'Enter') { this.performSearch(searchInput.value); } }); // ÁÇπÂáªÂ§ñÈÉ®ÂÖ≥Èó≠ÊêúÁ¥¢ÁªìÊûú document.addEventListener('click', (e) => { if (!searchInput.contains(e.target) && !searchResults.contains(e.target)) { searchResults.style.display = 'none'; } }); } performSearch(query) { const searchResults = document.getElementById('mainSearchResults'); if (!searchResults) return; if (!query.trim()) { searchResults.style.display = 'none'; return; } const results = this.searchPlanets(query); this.displaySearchResults(results, query); } searchPlanets(query) { const searchTerm = query.toLowerCase().trim(); return this.planets.filter(planet => { if (planet.name.toLowerCase().includes(searchTerm)) return true; if (planet.description.toLowerCase().includes(searchTerm)) return true; return planet.keywords.some(keyword => keyword.toLowerCase().includes(searchTerm)); }); } displaySearchResults(results, query) { const searchResults = document.getElementById('mainSearchResults'); if (!searchResults) return; if (results.length === 0) { searchResults.innerHTML = ` <div class="search-result-item"> <div class="search-result-title">No results found</div> <div class="search-result-description">Try searching for: sun, mercury, venus, earth, mars, jupiter, saturn, uranus, neptune</div> </div> `; } else { searchResults.innerHTML = results.map(planet => ` <a href="${planet.url}" class="search-result-item"> <div class="search-result-title">${this.highlightText(planet.name, query)}</div> <div class="search-result-description">${this.highlightText(planet.description, query)}</div> </a> `).join(''); } searchResults.style.display = 'block'; } highlightText(text, query) { if (!query.trim()) return text; const regex = new RegExp(`(${query})`, 'gi'); return text.replace(regex, '<mark style="background: #ffd700; color: #000;">$1</mark>'); } // Êî∂ËóèÂäüËÉΩ initializeFavorites() { // Á≠âÂæÖFavoritesManagerÂàùÂßãÂåñ setTimeout(() => { this.favoritesManager = window.favoritesManager; this.updateFavoritesCount(); }, 100); const favoritesButton = document.getElementById('favoritesButton'); if (favoritesButton) { favoritesButton.addEventListener('click', () => { this.showFavoritesModal(); }); } } updateFavoritesCount() { const countElement = document.getElementById('favoritesCount'); if (countElement && this.favoritesManager) { countElement.textContent = this.favoritesManager.getFavoriteCount(); } } addFavoriteIndicators() { const planetCards = document.querySelectorAll('.planet-card'); planetCards.forEach(card => { const planetName = card.querySelector('h2')?.textContent.trim(); if (planetName && this.isFavorite(planetName)) { this.addFavoriteIndicator(card); } }); } addFavoriteIndicator(card) { if (!card.querySelector('.favorite-indicator')) { const indicator = document.createElement('div'); indicator.className = 'favorite-indicator'; indicator.innerHTML = '‚≠ê'; card.style.position = 'relative'; card.appendChild(indicator); } } isFavorite(planetName) { if (!this.favoritesManager) { const favorites = JSON.parse(localStorage.getItem('solarSystemFavorites') || '[]'); return favorites.includes(planetName); } return this.favoritesManager.isFavorite(planetName); } showFavoritesModal() { const favorites = this.favoritesManager ? this.favoritesManager.getFavorites() : JSON.parse(localStorage.getItem('solarSystemFavorites') || '[]'); if (favorites.length === 0) { this.showNotification('No favorites yet. Add some planets to your favorites!'); return; } const modal = document.createElement('div'); modal.className = 'favorites-modal'; modal.style.cssText = ` position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0, 0, 0, 0.8); display: flex; align-items: center; justify-content: center; z-index: 10000; backdrop-filter: blur(10px); `; const modalContent = document.createElement('div'); modalContent.style.cssText = ` background: rgba(0, 0, 0, 0.9); border-radius: 15px; padding: 2rem; max-width: 500px; width: 90%; max-height: 80vh; overflow-y: auto; border: 1px solid rgba(255, 215, 0, 0.3); `; const favoritePlanets = this.planets.filter(planet => favorites.includes(planet.name)); modalContent.innerHTML = ` <h2 style="color: #ffd700; margin-bottom: 1rem;">‚≠ê Your Favorites</h2> <div style="display: flex; flex-direction: column; gap: 1rem;"> ${favoritePlanets.map(planet => ` <a href="${planet.url}" style=" display: flex; align-items: center; gap: 1rem; padding: 1rem; background: rgba(255, 255, 255, 0.1); border-radius: 10px; text-decoration: none; color: inherit; transition: all 0.3s ease; " onmouseover="this.style.background='rgba(255, 215, 0, 0.1)'" onmouseout="this.style.background='rgba(255, 255, 255, 0.1)'"> <img src="${planet.image}" alt="${planet.name}" style="width: 50px; height: 50px; border-radius: 50%; object-fit: cover;"> <div> <div style="font-weight: bold; color: #ffd700;">${planet.name}</div> <div style="font-size: 0.9rem; color: #ccc;">${planet.description}</div> </div> </a> `).join('')} </div> <div style="margin-top: 1rem; text-align: center;"> <button onclick="this.closest('.favorites-modal').remove()" style=" background: rgba(255, 215, 0, 0.2); border: 1px solid rgba(255, 215, 0, 0.3); color: #ffd700; padding: 0.5rem 1rem; border-radius: 20px; cursor: pointer; ">Close</button> </div> `; modal.appendChild(modalContent); document.body.appendChild(modal); // ÁÇπÂáªÂ§ñÈÉ®ÂÖ≥Èó≠ modal.addEventListener('click', (e) => { if (e.target === modal) { modal.remove(); } }); } // ‰∏ªÈ¢òÂàáÊç¢ initializeTheme() { const themeToggle = document.getElementById('themeToggle'); if (themeToggle) { this.applyTheme(); themeToggle.addEventListener('click', () => { this.toggleTheme(); }); } } applyTheme() { document.body.className = this.currentTheme + '-theme'; const themeToggle = document.getElementById('themeToggle'); if (themeToggle) { themeToggle.innerHTML = this.currentTheme === 'dark' ? 'üåô' : '‚òÄÔ∏è'; } } toggleTheme() { this.currentTheme = this.currentTheme === 'dark' ? 'light' : 'dark'; localStorage.setItem('theme', this.currentTheme); this.applyTheme(); } // ÈÄöÁü•ÂäüËÉΩ showNotification(message) { const notification = document.createElement('div'); notification.style.cssText = ` position: fixed; top: 20px; right: 20px; background: rgba(0, 0, 0, 0.8); color: #ffd700; padding: 1rem 1.5rem; border-radius: 25px; z-index: 1000; animation: slideIn 0.3s ease-out; backdrop-filter: blur(10px); border: 1px solid rgba(255, 215, 0, 0.3); `; notification.textContent = message; // Ê∑ªÂä†Âä®ÁîªÊ†∑Âºè if (!document.querySelector('#notification-styles')) { const style = document.createElement('style'); style.id = 'notification-styles'; style.textContent = ` @keyframes slideIn { from { transform: translateX(100%); opacity: 0; } to { transform: translateX(0); opacity: 1; } } @keyframes slideOut { from { transform: translateX(0); opacity: 1; } to { transform: translateX(100%); opacity: 0; } } `; document.head.appendChild(style); } document.body.appendChild(notification); setTimeout(() => { notification.style.animation = 'slideOut 0.3s ease-out'; setTimeout(() => { if (notification.parentNode) { notification.remove(); } }, 300); }, 3000); } } // ÂàùÂßãÂåñ‰∏ªÈ°µÈù¢ÈõÜÊàê document.addEventListener('DOMContentLoaded', () => { new MainPageIntegration(); });